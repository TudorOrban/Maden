// Code generated by MockGen. DO NOT EDIT.
// Source: maden/pkg/networking (interfaces: IPManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPManager is a mock of IPManager interface.
type MockIPManager struct {
	ctrl     *gomock.Controller
	recorder *MockIPManagerMockRecorder
}

// MockIPManagerMockRecorder is the mock recorder for MockIPManager.
type MockIPManagerMockRecorder struct {
	mock *MockIPManager
}

// NewMockIPManager creates a new mock instance.
func NewMockIPManager(ctrl *gomock.Controller) *MockIPManager {
	mock := &MockIPManager{ctrl: ctrl}
	mock.recorder = &MockIPManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPManager) EXPECT() *MockIPManagerMockRecorder {
	return m.recorder
}

// AssignIP mocks base method.
func (m *MockIPManager) AssignIP() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignIP")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignIP indicates an expected call of AssignIP.
func (mr *MockIPManagerMockRecorder) AssignIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignIP", reflect.TypeOf((*MockIPManager)(nil).AssignIP))
}

// ReleaseIP mocks base method.
func (m *MockIPManager) ReleaseIP(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseIP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseIP indicates an expected call of ReleaseIP.
func (mr *MockIPManagerMockRecorder) ReleaseIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIP", reflect.TypeOf((*MockIPManager)(nil).ReleaseIP), arg0)
}
