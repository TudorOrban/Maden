// Code generated by MockGen. DO NOT EDIT.
// Source: maden/pkg/etcd (interfaces: NodeRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	shared "maden/pkg/shared"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNodeRepository is a mock of NodeRepository interface.
type MockNodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNodeRepositoryMockRecorder
}

// MockNodeRepositoryMockRecorder is the mock recorder for MockNodeRepository.
type MockNodeRepositoryMockRecorder struct {
	mock *MockNodeRepository
}

// NewMockNodeRepository creates a new mock instance.
func NewMockNodeRepository(ctrl *gomock.Controller) *MockNodeRepository {
	mock := &MockNodeRepository{ctrl: ctrl}
	mock.recorder = &MockNodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeRepository) EXPECT() *MockNodeRepositoryMockRecorder {
	return m.recorder
}

// CreateNode mocks base method.
func (m *MockNodeRepository) CreateNode(arg0 *shared.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockNodeRepositoryMockRecorder) CreateNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockNodeRepository)(nil).CreateNode), arg0)
}

// DeleteNode mocks base method.
func (m *MockNodeRepository) DeleteNode(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockNodeRepositoryMockRecorder) DeleteNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockNodeRepository)(nil).DeleteNode), arg0)
}

// ListNodes mocks base method.
func (m *MockNodeRepository) ListNodes() ([]shared.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes")
	ret0, _ := ret[0].([]shared.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockNodeRepositoryMockRecorder) ListNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockNodeRepository)(nil).ListNodes))
}

// UpdateNode mocks base method.
func (m *MockNodeRepository) UpdateNode(arg0 *shared.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockNodeRepositoryMockRecorder) UpdateNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockNodeRepository)(nil).UpdateNode), arg0)
}
