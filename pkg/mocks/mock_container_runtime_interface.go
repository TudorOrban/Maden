// Code generated by MockGen. DO NOT EDIT.
// Source: maden/pkg/madelet (interfaces: ContainerRuntimeInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	shared "maden/pkg/shared"
	reflect "reflect"

	types "github.com/docker/docker/api/types"
	gomock "github.com/golang/mock/gomock"
)

// MockContainerRuntimeInterface is a mock of ContainerRuntimeInterface interface.
type MockContainerRuntimeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContainerRuntimeInterfaceMockRecorder
}

// MockContainerRuntimeInterfaceMockRecorder is the mock recorder for MockContainerRuntimeInterface.
type MockContainerRuntimeInterfaceMockRecorder struct {
	mock *MockContainerRuntimeInterface
}

// NewMockContainerRuntimeInterface creates a new mock instance.
func NewMockContainerRuntimeInterface(ctrl *gomock.Controller) *MockContainerRuntimeInterface {
	mock := &MockContainerRuntimeInterface{ctrl: ctrl}
	mock.recorder = &MockContainerRuntimeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerRuntimeInterface) EXPECT() *MockContainerRuntimeInterfaceMockRecorder {
	return m.recorder
}

// CreateContainer mocks base method.
func (m *MockContainerRuntimeInterface) CreateContainer(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockContainerRuntimeInterfaceMockRecorder) CreateContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockContainerRuntimeInterface)(nil).CreateContainer), arg0)
}

// DeleteContainer mocks base method.
func (m *MockContainerRuntimeInterface) DeleteContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockContainerRuntimeInterfaceMockRecorder) DeleteContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockContainerRuntimeInterface)(nil).DeleteContainer), arg0)
}

// ExecCommandAttach mocks base method.
func (m *MockContainerRuntimeInterface) ExecCommandAttach(arg0 context.Context, arg1 string, arg2 types.ExecStartCheck, arg3 bool) (*types.HijackedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCommandAttach", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.HijackedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCommandAttach indicates an expected call of ExecCommandAttach.
func (mr *MockContainerRuntimeInterfaceMockRecorder) ExecCommandAttach(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommandAttach", reflect.TypeOf((*MockContainerRuntimeInterface)(nil).ExecCommandAttach), arg0, arg1, arg2, arg3)
}

// ExecCommandCreate mocks base method.
func (m *MockContainerRuntimeInterface) ExecCommandCreate(arg0 context.Context, arg1 string, arg2 types.ExecConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCommandCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCommandCreate indicates an expected call of ExecCommandCreate.
func (mr *MockContainerRuntimeInterfaceMockRecorder) ExecCommandCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommandCreate", reflect.TypeOf((*MockContainerRuntimeInterface)(nil).ExecCommandCreate), arg0, arg1, arg2)
}

// GetContainerLogs mocks base method.
func (m *MockContainerRuntimeInterface) GetContainerLogs(arg0 context.Context, arg1 string, arg2 bool) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogs indicates an expected call of GetContainerLogs.
func (mr *MockContainerRuntimeInterfaceMockRecorder) GetContainerLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogs", reflect.TypeOf((*MockContainerRuntimeInterface)(nil).GetContainerLogs), arg0, arg1, arg2)
}

// GetContainerStatus mocks base method.
func (m *MockContainerRuntimeInterface) GetContainerStatus(arg0 string) (shared.ContainerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerStatus", arg0)
	ret0, _ := ret[0].(shared.ContainerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerStatus indicates an expected call of GetContainerStatus.
func (mr *MockContainerRuntimeInterfaceMockRecorder) GetContainerStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerStatus", reflect.TypeOf((*MockContainerRuntimeInterface)(nil).GetContainerStatus), arg0)
}

// StartContainer mocks base method.
func (m *MockContainerRuntimeInterface) StartContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockContainerRuntimeInterfaceMockRecorder) StartContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockContainerRuntimeInterface)(nil).StartContainer), arg0)
}

// StopContainer mocks base method.
func (m *MockContainerRuntimeInterface) StopContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockContainerRuntimeInterfaceMockRecorder) StopContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockContainerRuntimeInterface)(nil).StopContainer), arg0)
}
