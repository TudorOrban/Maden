// Code generated by MockGen. DO NOT EDIT.
// Source: D:/Projects/Programming/Golang/Maden/pkg/controller/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	shared "maden/pkg/shared"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mvccpb "go.etcd.io/etcd/api/v3/mvccpb"
)

// MockDeploymentController is a mock of DeploymentController interface.
type MockDeploymentController struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentControllerMockRecorder
}

// MockDeploymentControllerMockRecorder is the mock recorder for MockDeploymentController.
type MockDeploymentControllerMockRecorder struct {
	mock *MockDeploymentController
}

// NewMockDeploymentController creates a new mock instance.
func NewMockDeploymentController(ctrl *gomock.Controller) *MockDeploymentController {
	mock := &MockDeploymentController{ctrl: ctrl}
	mock.recorder = &MockDeploymentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentController) EXPECT() *MockDeploymentControllerMockRecorder {
	return m.recorder
}

// HandleIncomingDeployment mocks base method.
func (m *MockDeploymentController) HandleIncomingDeployment(deploymentSpec shared.DeploymentSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleIncomingDeployment", deploymentSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleIncomingDeployment indicates an expected call of HandleIncomingDeployment.
func (mr *MockDeploymentControllerMockRecorder) HandleIncomingDeployment(deploymentSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIncomingDeployment", reflect.TypeOf((*MockDeploymentController)(nil).HandleIncomingDeployment), deploymentSpec)
}

// MockDeploymentUpdaterController is a mock of DeploymentUpdaterController interface.
type MockDeploymentUpdaterController struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentUpdaterControllerMockRecorder
}

// MockDeploymentUpdaterControllerMockRecorder is the mock recorder for MockDeploymentUpdaterController.
type MockDeploymentUpdaterControllerMockRecorder struct {
	mock *MockDeploymentUpdaterController
}

// NewMockDeploymentUpdaterController creates a new mock instance.
func NewMockDeploymentUpdaterController(ctrl *gomock.Controller) *MockDeploymentUpdaterController {
	mock := &MockDeploymentUpdaterController{ctrl: ctrl}
	mock.recorder = &MockDeploymentUpdaterControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentUpdaterController) EXPECT() *MockDeploymentUpdaterControllerMockRecorder {
	return m.recorder
}

// HandleDeploymentCreate mocks base method.
func (m *MockDeploymentUpdaterController) HandleDeploymentCreate(kv *mvccpb.KeyValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDeploymentCreate", kv)
}

// HandleDeploymentCreate indicates an expected call of HandleDeploymentCreate.
func (mr *MockDeploymentUpdaterControllerMockRecorder) HandleDeploymentCreate(kv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeploymentCreate", reflect.TypeOf((*MockDeploymentUpdaterController)(nil).HandleDeploymentCreate), kv)
}

// HandleDeploymentDelete mocks base method.
func (m *MockDeploymentUpdaterController) HandleDeploymentDelete(kv *mvccpb.KeyValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDeploymentDelete", kv)
}

// HandleDeploymentDelete indicates an expected call of HandleDeploymentDelete.
func (mr *MockDeploymentUpdaterControllerMockRecorder) HandleDeploymentDelete(kv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeploymentDelete", reflect.TypeOf((*MockDeploymentUpdaterController)(nil).HandleDeploymentDelete), kv)
}

// HandleDeploymentRolloutRestart mocks base method.
func (m *MockDeploymentUpdaterController) HandleDeploymentRolloutRestart(deployment *shared.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeploymentRolloutRestart", deployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDeploymentRolloutRestart indicates an expected call of HandleDeploymentRolloutRestart.
func (mr *MockDeploymentUpdaterControllerMockRecorder) HandleDeploymentRolloutRestart(deployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeploymentRolloutRestart", reflect.TypeOf((*MockDeploymentUpdaterController)(nil).HandleDeploymentRolloutRestart), deployment)
}

// HandleDeploymentUpdate mocks base method.
func (m *MockDeploymentUpdaterController) HandleDeploymentUpdate(oldKv, newKv *mvccpb.KeyValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDeploymentUpdate", oldKv, newKv)
}

// HandleDeploymentUpdate indicates an expected call of HandleDeploymentUpdate.
func (mr *MockDeploymentUpdaterControllerMockRecorder) HandleDeploymentUpdate(oldKv, newKv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeploymentUpdate", reflect.TypeOf((*MockDeploymentUpdaterController)(nil).HandleDeploymentUpdate), oldKv, newKv)
}

// MockServiceController is a mock of ServiceController interface.
type MockServiceController struct {
	ctrl     *gomock.Controller
	recorder *MockServiceControllerMockRecorder
}

// MockServiceControllerMockRecorder is the mock recorder for MockServiceController.
type MockServiceControllerMockRecorder struct {
	mock *MockServiceController
}

// NewMockServiceController creates a new mock instance.
func NewMockServiceController(ctrl *gomock.Controller) *MockServiceController {
	mock := &MockServiceController{ctrl: ctrl}
	mock.recorder = &MockServiceControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceController) EXPECT() *MockServiceControllerMockRecorder {
	return m.recorder
}

// HandleIncomingService mocks base method.
func (m *MockServiceController) HandleIncomingService(serviceSpec shared.ServiceSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleIncomingService", serviceSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleIncomingService indicates an expected call of HandleIncomingService.
func (mr *MockServiceControllerMockRecorder) HandleIncomingService(serviceSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIncomingService", reflect.TypeOf((*MockServiceController)(nil).HandleIncomingService), serviceSpec)
}

// MockServiceUpdaterController is a mock of ServiceUpdaterController interface.
type MockServiceUpdaterController struct {
	ctrl     *gomock.Controller
	recorder *MockServiceUpdaterControllerMockRecorder
}

// MockServiceUpdaterControllerMockRecorder is the mock recorder for MockServiceUpdaterController.
type MockServiceUpdaterControllerMockRecorder struct {
	mock *MockServiceUpdaterController
}

// NewMockServiceUpdaterController creates a new mock instance.
func NewMockServiceUpdaterController(ctrl *gomock.Controller) *MockServiceUpdaterController {
	mock := &MockServiceUpdaterController{ctrl: ctrl}
	mock.recorder = &MockServiceUpdaterControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceUpdaterController) EXPECT() *MockServiceUpdaterControllerMockRecorder {
	return m.recorder
}

// HandleServiceCreate mocks base method.
func (m *MockServiceUpdaterController) HandleServiceCreate(kv *mvccpb.KeyValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleServiceCreate", kv)
}

// HandleServiceCreate indicates an expected call of HandleServiceCreate.
func (mr *MockServiceUpdaterControllerMockRecorder) HandleServiceCreate(kv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleServiceCreate", reflect.TypeOf((*MockServiceUpdaterController)(nil).HandleServiceCreate), kv)
}

// HandleServiceDelete mocks base method.
func (m *MockServiceUpdaterController) HandleServiceDelete(prevKv *mvccpb.KeyValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleServiceDelete", prevKv)
}

// HandleServiceDelete indicates an expected call of HandleServiceDelete.
func (mr *MockServiceUpdaterControllerMockRecorder) HandleServiceDelete(prevKv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleServiceDelete", reflect.TypeOf((*MockServiceUpdaterController)(nil).HandleServiceDelete), prevKv)
}

// HandleServiceUpdate mocks base method.
func (m *MockServiceUpdaterController) HandleServiceUpdate(prevKv, newKv *mvccpb.KeyValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleServiceUpdate", prevKv, newKv)
}

// HandleServiceUpdate indicates an expected call of HandleServiceUpdate.
func (mr *MockServiceUpdaterControllerMockRecorder) HandleServiceUpdate(prevKv, newKv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleServiceUpdate", reflect.TypeOf((*MockServiceUpdaterController)(nil).HandleServiceUpdate), prevKv, newKv)
}

// MockPodUpdaterController is a mock of PodUpdaterController interface.
type MockPodUpdaterController struct {
	ctrl     *gomock.Controller
	recorder *MockPodUpdaterControllerMockRecorder
}

// MockPodUpdaterControllerMockRecorder is the mock recorder for MockPodUpdaterController.
type MockPodUpdaterControllerMockRecorder struct {
	mock *MockPodUpdaterController
}

// NewMockPodUpdaterController creates a new mock instance.
func NewMockPodUpdaterController(ctrl *gomock.Controller) *MockPodUpdaterController {
	mock := &MockPodUpdaterController{ctrl: ctrl}
	mock.recorder = &MockPodUpdaterControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodUpdaterController) EXPECT() *MockPodUpdaterControllerMockRecorder {
	return m.recorder
}

// HandlePodUpdate mocks base method.
func (m *MockPodUpdaterController) HandlePodUpdate(oldKv, newKv *mvccpb.KeyValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePodUpdate", oldKv, newKv)
}

// HandlePodUpdate indicates an expected call of HandlePodUpdate.
func (mr *MockPodUpdaterControllerMockRecorder) HandlePodUpdate(oldKv, newKv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePodUpdate", reflect.TypeOf((*MockPodUpdaterController)(nil).HandlePodUpdate), oldKv, newKv)
}

// MockPersistentVolumeController is a mock of PersistentVolumeController interface.
type MockPersistentVolumeController struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentVolumeControllerMockRecorder
}

// MockPersistentVolumeControllerMockRecorder is the mock recorder for MockPersistentVolumeController.
type MockPersistentVolumeControllerMockRecorder struct {
	mock *MockPersistentVolumeController
}

// NewMockPersistentVolumeController creates a new mock instance.
func NewMockPersistentVolumeController(ctrl *gomock.Controller) *MockPersistentVolumeController {
	mock := &MockPersistentVolumeController{ctrl: ctrl}
	mock.recorder = &MockPersistentVolumeControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentVolumeController) EXPECT() *MockPersistentVolumeControllerMockRecorder {
	return m.recorder
}

// HandleIncomingPersistentVolume mocks base method.
func (m *MockPersistentVolumeController) HandleIncomingPersistentVolume(volumeSpec shared.PersistentVolumeSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleIncomingPersistentVolume", volumeSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleIncomingPersistentVolume indicates an expected call of HandleIncomingPersistentVolume.
func (mr *MockPersistentVolumeControllerMockRecorder) HandleIncomingPersistentVolume(volumeSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIncomingPersistentVolume", reflect.TypeOf((*MockPersistentVolumeController)(nil).HandleIncomingPersistentVolume), volumeSpec)
}

// MockPersistentVolumeClaimController is a mock of PersistentVolumeClaimController interface.
type MockPersistentVolumeClaimController struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentVolumeClaimControllerMockRecorder
}

// MockPersistentVolumeClaimControllerMockRecorder is the mock recorder for MockPersistentVolumeClaimController.
type MockPersistentVolumeClaimControllerMockRecorder struct {
	mock *MockPersistentVolumeClaimController
}

// NewMockPersistentVolumeClaimController creates a new mock instance.
func NewMockPersistentVolumeClaimController(ctrl *gomock.Controller) *MockPersistentVolumeClaimController {
	mock := &MockPersistentVolumeClaimController{ctrl: ctrl}
	mock.recorder = &MockPersistentVolumeClaimControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentVolumeClaimController) EXPECT() *MockPersistentVolumeClaimControllerMockRecorder {
	return m.recorder
}

// HandleIncomingPersistentVolumeClaim mocks base method.
func (m *MockPersistentVolumeClaimController) HandleIncomingPersistentVolumeClaim(volumeClaimSpec shared.PersistentVolumeClaimSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleIncomingPersistentVolumeClaim", volumeClaimSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleIncomingPersistentVolumeClaim indicates an expected call of HandleIncomingPersistentVolumeClaim.
func (mr *MockPersistentVolumeClaimControllerMockRecorder) HandleIncomingPersistentVolumeClaim(volumeClaimSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIncomingPersistentVolumeClaim", reflect.TypeOf((*MockPersistentVolumeClaimController)(nil).HandleIncomingPersistentVolumeClaim), volumeClaimSpec)
}
