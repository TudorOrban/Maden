// Code generated by MockGen. DO NOT EDIT.
// Source: maden/pkg/etcd (interfaces: DNSRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDNSRepository is a mock of DNSRepository interface.
type MockDNSRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDNSRepositoryMockRecorder
}

// MockDNSRepositoryMockRecorder is the mock recorder for MockDNSRepository.
type MockDNSRepositoryMockRecorder struct {
	mock *MockDNSRepository
}

// NewMockDNSRepository creates a new mock instance.
func NewMockDNSRepository(ctrl *gomock.Controller) *MockDNSRepository {
	mock := &MockDNSRepository{ctrl: ctrl}
	mock.recorder = &MockDNSRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSRepository) EXPECT() *MockDNSRepositoryMockRecorder {
	return m.recorder
}

// DeregisterService mocks base method.
func (m *MockDNSRepository) DeregisterService(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterService indicates an expected call of DeregisterService.
func (mr *MockDNSRepositoryMockRecorder) DeregisterService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterService", reflect.TypeOf((*MockDNSRepository)(nil).DeregisterService), arg0)
}

// RegisterService mocks base method.
func (m *MockDNSRepository) RegisterService(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockDNSRepositoryMockRecorder) RegisterService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockDNSRepository)(nil).RegisterService), arg0, arg1)
}

// ResolveService mocks base method.
func (m *MockDNSRepository) ResolveService(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveService", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveService indicates an expected call of ResolveService.
func (mr *MockDNSRepositoryMockRecorder) ResolveService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveService", reflect.TypeOf((*MockDNSRepository)(nil).ResolveService), arg0)
}
