// Code generated by MockGen. DO NOT EDIT.
// Source: maden/pkg/madelet (interfaces: PodManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	shared "maden/pkg/shared"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPodManager is a mock of PodManager interface.
type MockPodManager struct {
	ctrl     *gomock.Controller
	recorder *MockPodManagerMockRecorder
}

// MockPodManagerMockRecorder is the mock recorder for MockPodManager.
type MockPodManagerMockRecorder struct {
	mock *MockPodManager
}

// NewMockPodManager creates a new mock instance.
func NewMockPodManager(ctrl *gomock.Controller) *MockPodManager {
	mock := &MockPodManager{ctrl: ctrl}
	mock.recorder = &MockPodManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodManager) EXPECT() *MockPodManagerMockRecorder {
	return m.recorder
}

// GetContainerLogs mocks base method.
func (m *MockPodManager) GetContainerLogs(arg0 context.Context, arg1 string, arg2 bool) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogs indicates an expected call of GetContainerLogs.
func (mr *MockPodManagerMockRecorder) GetContainerLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogs", reflect.TypeOf((*MockPodManager)(nil).GetContainerLogs), arg0, arg1, arg2)
}

// RunPod mocks base method.
func (m *MockPodManager) RunPod(arg0 *shared.Pod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunPod", arg0)
}

// RunPod indicates an expected call of RunPod.
func (mr *MockPodManagerMockRecorder) RunPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPod", reflect.TypeOf((*MockPodManager)(nil).RunPod), arg0)
}

// StopPod mocks base method.
func (m *MockPodManager) StopPod(arg0 *shared.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPod", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopPod indicates an expected call of StopPod.
func (mr *MockPodManagerMockRecorder) StopPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPod", reflect.TypeOf((*MockPodManager)(nil).StopPod), arg0)
}
